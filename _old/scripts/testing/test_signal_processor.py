#!/usr/bin/env python3
"""
Script de prueba para el procesador de se√±ales
"""

import sys
from pathlib import Path
from datetime import datetime, timezone, timedelta

# A√±adir el directorio ra√≠z al path
sys.path.append(str(Path(__file__).parent))

from core.ml.signals.signal_processor import create_signal_processor

def test_signal_processor():
    """Probar el procesador de se√±ales"""
    print("üß™ Probando Signal Processor...")
    print("=" * 50)
    
    try:
        # Crear procesador
        print("1. Creando procesador...")
        processor = create_signal_processor()
        print("   ‚úÖ Procesador creado correctamente")
        
        # Probar configuraci√≥n
        print("2. Verificando configuraci√≥n...")
        print(f"   - Batch size: {processor.config.batch_size}")
        print(f"   - Lookback minutes: {processor.config.lookback_minutes}")
        print(f"   - Min confidence: {processor.config.min_confidence}")
        print(f"   - Min strength: {processor.config.min_strength}")
        print(f"   - Filtros: {processor.config.filters}")
        print("   ‚úÖ Configuraci√≥n cargada correctamente")
        
        # Probar conexi√≥n a base de datos
        print("3. Probando conexi√≥n a base de datos...")
        try:
            with processor.engine.connect() as conn:
                result = conn.execute("SELECT 1").fetchone()
                print("   ‚úÖ Conexi√≥n a base de datos exitosa")
        except Exception as e:
            print(f"   ‚ùå Error de conexi√≥n: {e}")
            return False
        
        # Probar obtenci√≥n de predicciones
        print("4. Probando obtenci√≥n de predicciones...")
        predictions = processor.get_recent_predictions(limit=5)
        print(f"   - Predicciones encontradas: {len(predictions)}")
        if predictions:
            print(f"   - √öltima predicci√≥n: {predictions[0].timestamp}")
            print(f"   - S√≠mbolo: {predictions[0].symbol}")
            print(f"   - Timeframe: {predictions[0].timeframe}")
        print("   ‚úÖ Obtenci√≥n de predicciones exitosa")
        
        # Probar procesamiento (si hay predicciones)
        if predictions:
            print("5. Probando procesamiento de se√±ales...")
            stats = processor.process_predictions_to_signals()
            print(f"   - Predicciones procesadas: {stats.get('predictions', 0)}")
            print(f"   - Se√±ales generadas: {stats.get('signals', 0)}")
            print(f"   - Se√±ales guardadas: {stats.get('saved_signals', 0)}")
            print(f"   - Errores: {stats.get('errors', 0)}")
            print(f"   - Tiempo de procesamiento: {stats.get('processing_time', 0):.2f}s")
            print("   ‚úÖ Procesamiento exitoso")
        else:
            print("5. No hay predicciones para procesar (esto es normal)")
            print("   ‚úÖ Procesador listo para usar")
        
        print("\n" + "=" * 50)
        print("üéâ TODAS LAS PRUEBAS PASARON EXITOSAMENTE")
        print("=" * 50)
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERROR EN LAS PRUEBAS: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_configuration():
    """Probar la configuraci√≥n"""
    print("\nüîß Probando configuraci√≥n...")
    
    try:
        processor = create_signal_processor()
        
        # Verificar configuraci√≥n por defecto
        assert processor.config.batch_size > 0, "Batch size debe ser positivo"
        assert processor.config.lookback_minutes > 0, "Lookback minutes debe ser positivo"
        assert 0 <= processor.config.min_confidence <= 1, "Min confidence debe estar entre 0 y 1"
        assert 0 <= processor.config.min_strength <= 1, "Min strength debe estar entre 0 y 1"
        assert len(processor.config.filters) > 0, "Debe haber al menos un filtro"
        
        print("   ‚úÖ Configuraci√≥n v√°lida")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Error en configuraci√≥n: {e}")
        return False

def main():
    """Funci√≥n principal de prueba"""
    print("üöÄ INICIANDO PRUEBAS DEL PROCESADOR DE SE√ëALES")
    print("=" * 60)
    
    # Ejecutar pruebas
    config_ok = test_configuration()
    processor_ok = test_signal_processor()
    
    print("\n" + "=" * 60)
    if config_ok and processor_ok:
        print("üéâ TODAS LAS PRUEBAS COMPLETADAS EXITOSAMENTE")
        print("\nEl procesador est√° listo para usar:")
        print("  python scripts/run_signal_processor.py --mode realtime")
        return 0
    else:
        print("‚ùå ALGUNAS PRUEBAS FALLARON")
        print("\nRevisa los errores anteriores y corrige la configuraci√≥n")
        return 1

if __name__ == "__main__":
    exit(main())
